workers <- c("10.0.0.108", "10.0.0.68")
# Create the cluster using PSOCK
cl <- makePSOCKcluster(workers)
Restarting R session...
library(parallel)
# Set SSH command
Sys.setenv(R_SSHCMD = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null")
# Define the worker nodes
workers <- c("10.0.0.108", "10.0.0.68")
# Specify the Rscript path explicitly
rscript_path <- "/usr/bin/Rscript"
# Create the cluster
cl <- makePSOCKcluster(workers, rscript = rscript_path, manual = TRUE)
library(parallel)
# Set SSH command with non-interactive options
Sys.setenv(R_SSHCMD = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null")
# Create the cluster using PSOCK
cl <- makePSOCKcluster("10.0.0.108")
# Test the cluster
result <- parSapply(cl, 1:5, function(x) x^2)
# Create the cluster using PSOCK
cl <- makePSOCKcluster("10.0.0.68")
library(parallel)
# Set SSH command with non-interactive options
Sys.setenv(R_SSHCMD = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null")
# Create the cluster using PSOCK
cl <- makePSOCKcluster("10.0.0.68")
cl <- makePSOCKcluster("10.0.0.68", verbose = TRUE, outfile = "debug.log")
cl <- makePSOCKcluster("10.0.0.68", verbose = TRUE, outfile = "cluster_log.txt")
library(parallel)
# Set SSH command with non-interactive options
Sys.setenv(R_SSHCMD = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null")
cl <- makePSOCKcluster(c("10.0.0.68"), type = "PSOCK", outfile = "debug.log")
cl <- makePSOCKcluster(c("10.0.0.68"), type = "PSOCK", outfile = "/home/anfebar/debug.log")
library(parallel)
# Set SSH command with non-interactive options
Sys.setenv(R_SSHCMD = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null")
cl <- makePSOCKcluster(c("10.0.0.68"), type = "PSOCK", verbose = TRUE)
library(parallel)
# Set the SSH command to avoid interactive prompts
Sys.setenv(R_SSHCMD = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null")
# Define your worker nodes
workers <- c("10.0.0.68")
# Create the cluster using PSOCK
cl <- makePSOCKcluster(workers)
# Load the future package
library(future)
# Load the future package
library(future)
# Define the remote workers
workers <- c("anfebar@10.0.0.108", "anfebar@10.0.0.68")
# Set the plan to use the remote cluster
plan(cluster, workers = workers, sshcmd = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null")
# Test the setup with a simple future
result <- future({
Sys.info()["nodename"]
})
# Print the result
print(value(result))
# Load the future package
library(future)
# Step 1: Set the SSH command globally to avoid interactive prompts
Sys.setenv(R_SSHCMD = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null")
# Step 2: Define the remote workers (IP addresses with usernames)
workers <- c("anfebar@10.0.0.108", "anfebar@10.0.0.68")
# Step 3: Set the plan to use the remote cluster
plan(cluster, workers = workers)
# Step 4: Test the setup with a simple future
result <- future({
Sys.info()["nodename"]
})
# Print the result of the simple test
print(value(result))
# Step 5: Run a parallel calculation across the workers
results <- future_lapply(1:5, function(x) {
paste(Sys.info()["nodename"], ":", x^2)
})
# Load the necessary packages
library(future)
library(future.apply)
install.packages("future.apply")
# Load the necessary packages
library(future)
library(future.apply)
# Step 1: Set the SSH command globally to avoid interactive prompts
Sys.setenv(R_SSHCMD = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null")
# Step 2: Define the remote workers (IP addresses with usernames)
workers <- c("anfebar@10.0.0.108", "anfebar@10.0.0.68")
# Step 3: Set the plan to use the remote cluster
plan(cluster, workers = workers)
# Step 4: Test the setup with a simple future
result <- future({
Sys.info()["nodename"]
})
# Print the result of the simple test
print(value(result))
# Step 5: Run a parallel calculation across the workers using future_lapply
results <- future_lapply(1:5, function(x) {
paste(Sys.info()["nodename"], ":", x^2)
})
# Print the parallel calculation results
print(results)
# Load the necessary packages
library(future)
library(future.apply)
# Step 1: Set the SSH command globally to avoid interactive prompts
Sys.setenv(R_SSHCMD = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null")
# Step 2: Define the remote workers (IP addresses with usernames)
workers <- c("anfebar@10.0.0.108", "anfebar@10.0.0.68")
# Step 3: Set the plan to use the remote cluster
plan(cluster, workers = workers)
# Step 4: Test the setup with a simple future
result <- future({
Sys.info()["nodename"]
})
# Print the result of the simple test
print(value(result))
# Step 5: Run a parallel calculation across the workers using future_lapply
results <- future_lapply(1:5, function(x) {
paste(Sys.info()["nodename"], ":", x^2)
})
# Print the parallel calculation results
print(results)
# Step 6: Check if all workers are functioning properly
all_results <- future_lapply(1:3, function(x) {
paste("Worker", Sys.info()["nodename"], "squared:", x^2)
})
# Print the final test results
print(all_results)
# Load the necessary packages
library(future)
library(future.apply)
# Set the SSH command globally to avoid interactive prompts
Sys.setenv(R_SSHCMD = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null")
# Define the remote workers (IP addresses with usernames)
remote_worker <- c("anfebar@10.0.0.68")
both_workers <- c("localhost", "anfebar@10.0.0.68")
# Matrix size
matrix_size <- 200
# Function to create and invert a matrix
invert_matrix <- function(n) {
mat <- matrix(runif(n * n), n, n)  # Create a random matrix
inv <- solve(mat)                  # Invert the matrix
return(dim(inv))                   # Return dimensions to verify
}
# Measure time function
measure_time <- function(expr) {
start <- Sys.time()
result <- expr
end <- Sys.time()
time_taken <- end - start
list(result = result, time = time_taken)
}
# Task 1: Invert matrix using only the host
plan(sequential)
host_time <- measure_time(future_lapply(1:3, function(x) invert_matrix(matrix_size)))
print(paste("Host only time:", host_time$time))
# Matrix size
matrix_size <- 200
# Function to create and invert a matrix
invert_matrix <- function(n) {
mat <- matrix(runif(n * n), n, n)  # Create a random matrix
inv <- solve(mat)                  # Invert the matrix
return(dim(inv))                   # Return dimensions to verify
}
# Measure time function
measure_time <- function(expr) {
start <- Sys.time()
result <- expr
end <- Sys.time()
time_taken <- end - start
list(result = result, time = time_taken)
}
# Task 1: Invert matrix using only the host
plan(sequential)
host_time <- measure_time(future_lapply(1:3, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Host only time:", host_time$time))
# Matrix size
matrix_size <- 1000
# Function to create and invert a matrix
invert_matrix <- function(n) {
mat <- matrix(runif(n * n), n, n)  # Create a random matrix
inv <- solve(mat)                  # Invert the matrix
return(dim(inv))                   # Return dimensions to verify
}
# Measure time function
measure_time <- function(expr) {
start <- Sys.time()
result <- expr
end <- Sys.time()
time_taken <- end - start
list(result = result, time = time_taken)
}
# Task 1: Invert matrix using only the host
plan(sequential)
host_time <- measure_time(future_lapply(1:3, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Host only time:", host_time$time))
# Matrix size
matrix_size <- 2000
# Function to create and invert a matrix
invert_matrix <- function(n) {
mat <- matrix(runif(n * n), n, n)  # Create a random matrix
inv <- solve(mat)                  # Invert the matrix
return(dim(inv))                   # Return dimensions to verify
}
# Measure time function
measure_time <- function(expr) {
start <- Sys.time()
result <- expr
end <- Sys.time()
time_taken <- end - start
list(result = result, time = time_taken)
}
# Task 1: Invert matrix using only the host
plan(sequential)
host_time <- measure_time(future_lapply(1:3, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Host only time:", host_time$time))
# Matrix size
matrix_size <- 1000
# Function to create and invert a matrix
invert_matrix <- function(n) {
mat <- matrix(runif(n * n), n, n)  # Create a random matrix
inv <- solve(mat)                  # Invert the matrix
return(dim(inv))                   # Return dimensions to verify
}
# Measure time function
measure_time <- function(expr) {
start <- Sys.time()
result <- expr
end <- Sys.time()
time_taken <- end - start
list(result = result, time = time_taken)
}
# Task 1: Invert matrix using only the host
plan(sequential)
host_time <- measure_time(future_lapply(1:3, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Host only time:", host_time$time))
# Task 2: Invert matrix using only the remote worker
plan(cluster, workers = remote_worker)
remote_time <- measure_time(future_lapply(1:3, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
# Task 3: Invert matrix using both the host and remote worker
plan(cluster, workers = both_workers)
both_time <- measure_time(future_lapply(1:3, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Both host and remote time:", both_time$time))
# Task 1: Invert matrix using only the host
plan(sequential)
host_time <- measure_time(future_lapply(1:10, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Host only time:", host_time$time))
# Task 2: Invert matrix using only the remote worker
plan(cluster, workers = remote_worker)
remote_time <- measure_time(future_lapply(1:10, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
# Task 3: Invert matrix using both the host and remote worker
plan(cluster, workers = both_workers)
both_time <- measure_time(future_lapply(1:10, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Both host and remote time:", both_time$time))
# Print the timings
print("Time taken for matrix inversion:")
print(paste("Host only: ", host_time$time))
print(paste("Remote only: ", remote_time$time))
print(paste("Both host and remote: ", both_time$time))
# Load the necessary packages
library(future)
library(future.apply)
# Set the SSH command globally to avoid interactive prompts
Sys.setenv(R_SSHCMD = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null")
# Define the remote workers (IP addresses with usernames)
remote_worker <- c("anfebar@10.0.0.68")
remote_worker <- c("anfebar@100.71.118.97")
both_workers <- c("localhost", "anfebar@10.0.0.68")
# Matrix size
matrix_size <- 1000
# Function to create and invert a matrix
invert_matrix <- function(n) {
mat <- matrix(runif(n * n), n, n)  # Create a random matrix
inv <- solve(mat)                  # Invert the matrix
return(dim(inv))                   # Return dimensions to verify
}
# Measure time function
measure_time <- function(expr) {
start <- Sys.time()
result <- expr
end <- Sys.time()
time_taken <- end - start
list(result = result, time = time_taken)
}
# Task 1: Invert matrix using only the host
plan(sequential)
host_time <- measure_time(future_lapply(1:10, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Host only time:", host_time$time))
# Task 2: Invert matrix using only the remote worker
plan(cluster, workers = remote_worker)
remote_time <- measure_time(future_lapply(1:10, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
# Task 3: Invert matrix using both the host and remote worker
plan(cluster, workers = both_workers)
both_time <- measure_time(future_lapply(1:10, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Both host and remote time:", both_time$time))
# Task 3: Invert matrix using both the host (parallel) and remote worker
plan(list(
multisession,                          # Use all local cores
cluster, workers = remote_worker        # Use remote workers
))
# Step 1: Use both host (multisession) and remote worker (cluster) in parallel
plan(list(
tweak(multisession),                 # Use all local cores
tweak(cluster, workers = remote_worker) # Use remote worker
))
# Task 3: Invert matrix using both the host (parallel) and remote worker
both_time <- measure_time(future_lapply(1:10, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Both host and remote (parallel) time:", both_time$time))
remote_worker <- c("anfebar@100.71.118.97")
both_workers <- c("localhost", "anfebar@10.0.0.68")
# Matrix size
matrix_size <- 1000
# Function to create and invert a matrix
invert_matrix <- function(n) {
mat <- matrix(runif(n * n), n, n)  # Create a random matrix
inv <- solve(mat)                  # Invert the matrix
return(dim(inv))                   # Return dimensions to verify
}
# Measure time function
measure_time <- function(expr) {
start <- Sys.time()
result <- expr
end <- Sys.time()
time_taken <- end - start
list(result = result, time = time_taken)
}
# Task 1: Invert matrix using only the host
plan(sequential)
host_time <- measure_time(future_lapply(1:10, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Host only time:", host_time$time))
# Task 2: Invert matrix using only the remote worker
plan(cluster, workers = remote_worker)
remote_time <- measure_time(future_lapply(1:10, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
# Task 3: Invert matrix using both the host and remote worker
plan(cluster, workers = both_workers)
both_time <- measure_time(future_lapply(1:20, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Both host and remote time:", both_time$time))
# Task 3: Invert matrix using both the host and remote worker
plan(cluster, workers = both_workers)
both_time <- measure_time(future_lapply(1:10, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Both host and remote time:", both_time$time))
# Step 1: Use both host (multisession) and remote worker (cluster) in parallel
plan(list(
tweak(multisession),                 # Use all local cores
tweak(cluster, workers = remote_worker) # Use remote worker
))
# Task 3: Invert matrix using both the host (parallel) and remote worker
both_time <- measure_time(future_lapply(1:10, function(x) invert_matrix(matrix_size), future.seed = TRUE))
remote_worker
# Task 3: Invert matrix using both the host and remote worker
plan(cluster, workers = both_workers)
both_time <- measure_time(future_lapply(1:10, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Both host and remote time:", both_time$time))
# Task 3: Invert matrix using both the host and remote worker
plan(strategy = NULL, workers = both_workers)
both_time <- measure_time(future_lapply(1:10, function(x) invert_matrix(matrix_size), future.seed = TRUE))
# Task 4: Invert matrix using both the host and remote worker
plan(multicore, workers = remote_worker)
# Task 4: Invert matrix using both the host and remote worker
plan(cluster, workers = remote_worker)
remote_time <- measure_time(future_lapply(1:20, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
# Load the necessary packages
library(future)
library(future.apply)
# Set the SSH command globally to avoid interactive prompts
Sys.setenv(R_SSHCMD = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null")
# Define the remote workers (IP addresses with usernames)
remote_worker <- c("anfebar@10.0.0.68")
both_workers <- c("localhost", "anfebar@10.0.0.68")
# Task 3: Invert matrix using both the host and remote worker
plan(strategy = NULL, cluster, workers = both_workers)
both_time <- measure_time(future_lapply(1:20, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Both host and remote time:", both_time$time))
# Load the necessary packages
library(future)
library(future.apply)
# Set the SSH command globally to avoid interactive prompts
Sys.setenv(R_SSHCMD = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null")
# Define the remote workers (IP addresses with usernames)
remote_worker <- c("anfebar@10.0.0.68")
remote_worker <- c("anfebar@100.71.118.97")
# Task 4: Invert matrix using both the host and remote worker
remote_worker <- rep("anfebar@100.71.118.97",10)
remote_worker
plan(cluster, workers = remote_worker)
remote_time <- measure_time(future_lapply(1:20, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
remote_time <- measure_time(future_lapply(1:100, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
# Task 4: Invert matrix using both the host and remote worker
remote_worker <- c(rep("anfebar@10.0.0.68",3), rep("anfebar@100.71.118.97",10))
plan(cluster, workers = remote_worker)
remote_time <- measure_time(future_lapply(1:100, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
# Task 4: Invert matrix using both the host and remote worker
remote_worker <- c(rep("anfebar@10.0.0.68",2), rep("anfebar@100.71.118.97",2))
plan(cluster, workers = remote_worker)
# Task 4: Invert matrix using both the host and remote worker
remote_worker <- c(rep("localhost", 2),
rep("anfebar@10.0.0.68", 2),
rep("anfebar@100.71.118.97", 2))
remote_worker
all_workers
# Task 4: Invert matrix using both the host and remote worker
all_workers <- c(rep("localhost", 2),
rep("anfebar@10.0.0.68", 2),
rep("anfebar@100.71.118.97", 2))
# Task 4: Invert matrix using both the host and remote worker
all_workers <- c(rep("localhost", 2),
rep("anfebar@10.0.0.68", 2),
rep("anfebar@100.71.118.97", 2))
plan(cluster, workers = all_workers)
remote_time <- measure_time(future_lapply(1:50, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
all_workers <- c(rep("localhost", 3),
rep("anfebar@10.0.0.68", 3),
rep("anfebar@100.71.118.97", 0))
all_workers
plan(cluster, workers = all_workers)
remote_time <- measure_time(future_lapply(1:50, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
# Task 4: Invert matrix using both the host and remote worker
all_workers <- c(rep("localhost", 7),
rep("anfebar@10.0.0.68", 3),
rep("anfebar@100.71.118.97", 0))
plan(cluster, workers = all_workers)
remote_time <- measure_time(future_lapply(1:50, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
# Task 4: Invert matrix using both the host and remote worker
all_workers <- c(rep("localhost", 7),
rep("anfebar@10.0.0.68", 3),
rep("anfebar@100.71.118.97", 15))
plan(cluster, workers = all_workers)
remote_time <- measure_time(future_lapply(1:50, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
remote_time <- measure_time(future_lapply(1:100, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
remote_time <- measure_time(future_lapply(1:200, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
# Task 4: Invert matrix using both the host and remote worker
all_workers <- c(rep("localhost", 5),
rep("anfebar@10.0.0.68", 3),
rep("anfebar@100.71.118.97", 10))
plan(cluster, workers = all_workers)
remote_time <- measure_time(future_lapply(1:200, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
# Task 4: Invert matrix using both the host and remote worker
all_workers <- c(rep("localhost", 5),
rep("anfebar@10.0.0.68", 3),
rep("anfebar@100.71.118.97", 12))
plan(cluster, workers = all_workers)
# Load the necessary packages
library(future)
library(future.apply)
# Set the SSH command globally to avoid interactive prompts
Sys.setenv(R_SSHCMD = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null")
# Matrix size
matrix_size <- 1000
# Function to create and invert a matrix
invert_matrix <- function(n) {
mat <- matrix(runif(n * n), n, n)  # Create a random matrix
inv <- solve(mat)                  # Invert the matrix
return(dim(inv))                   # Return dimensions to verify
}
# Measure time function
measure_time <- function(expr) {
start <- Sys.time()
result <- expr
end <- Sys.time()
time_taken <- end - start
list(result = result, time = time_taken)
}
# Task 4: Invert matrix using both the host and remote worker
all_workers <- c(rep("localhost", 5),
rep("anfebar@10.0.0.68", 3),
rep("anfebar@100.71.118.97", 5))
plan(cluster, workers = all_workers)
remote_time <- measure_time(future_lapply(1:400, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
# Task 4: Invert matrix using both the host and remote worker
all_workers <- c(rep("localhost", 0),
rep("anfebar@10.0.0.68", 0),
rep("anfebar@100.71.118.97", 10))
plan(cluster, workers = all_workers)
remote_time <- measure_time(future_lapply(1:400, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
# Task 4: Invert matrix using both the host and remote worker
all_workers <- c(rep("localhost", 5),
rep("anfebar@10.0.0.68", 3),
rep("anfebar@100.71.118.97", 10))
plan(cluster, workers = all_workers)
remote_time <- measure_time(future_lapply(1:400, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
# Task 4: Invert matrix using both the host and remote worker
all_workers <- c(rep("localhost", 6),
rep("anfebar@10.0.0.68", 3),
rep("anfebar@100.71.118.97", 14))
plan(cluster, workers = all_workers)
remote_time <- measure_time(future_lapply(1:1000, function(x) invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
remote_time
remote_time <- measure_time(future_replicate(100, invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
remote_time <- measure_time(future_replicate(1000, invert_matrix(matrix_size), future.seed = TRUE))
print(paste("Remote only time:", remote_time$time))
setwd("~/anfebar_HS/Dropbox/[01] Active/[01] Research/2023_UnboundedDP/Round1/code_supplement/Section6.1/Bootstrap")
